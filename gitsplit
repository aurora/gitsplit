#!/usr/bin/env bash

# gitsplit
# Copyright (C) 2018 by Harald Lapp <harald@octris.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [[ "$3" = "" ]]; then
    echo "usage: gitsplit branch dst keep [keep ...]"
    echo
    echo "DESCRIPTION"
    echo "    This tool is used to split parts of a repository into a new"
    echo "    repository. The tool must be executed inside the source re-"
    echo "    pository. The specified destination path cannot be a sub-"
    echo "    directory of the source repository."
    echo
    echo "ARGUMENTS"
    echo "    branch    The source branch to split from."
    echo
    echo "    dst       The destination path for the repository to create"
    echo "              This path must not exist."
    echo
    echo "    keep      At least one path to keep in the new repository."
    exit 1
fi

src=$(pwd)
branch=$1; shift
dst=$1; shift

if [ ! -d $src ]; then
    echo "source path is not a directory $src"
    exit 1
elif [ -e $dst ]; then
    echo "destination path already exists $dst"
    exit 1
fi

case $(cd $(dirname $dst) && { pwd -P 2>/dev/null || env PWD= pwd; })/ in
   "$( pwd -P 2>/dev/null || env PWD= pwd )"/*)
       echo "destination path can not be a subfolder of source path"
       exit 1
       ;;
esac

git rev-parse --abbrev-ref HEAD 2>&1 >/dev/null

if [ $? -ne 0 ]; then
    echo "source path is not a git repository $src"
    exit 1
fi

# manage keep list, prevents duplicate entries
keep=()

function keep_item {
    case "${keep[@]}" in *"$1"*) ;; *) keep+=($1) ;; esac
}

# collect filenames from path specified as command line arguments
for i in "$@"; do
    name=$(echo $i | perl -pe 's/^(\.(?=[\.\/])|\/)*(.*?)[.\/]*$/.\/$2/')

    if [ -f $name ]; then
        keep_item $name
    elif [ -d $name ]; then
        while read -r tmp; do
            keep_item $tmp
        done < <(find $name -type f)
    fi
done

# add renamed files
for ((i=0; i<${#keep[@]}; i++)); do
    while read -r -a tmp; do
        if [[ "./${tmp[2]}" = "${keep[$i]}" ]]; then
            # only exact match
            keep_item ./${tmp[1]}
        fi
    done < <(git log --follow --name-status --oneline -- "${keep[$i]}" | grep "^R")
done

if [ ${#keep[@]} -eq 0 ]; then
    echo "nothing to do"
    exit 1
fi

for ((i=0; i<${#keep[@]}; i++)); do
    echo ${keep[$i]}
done

echo
read -p "split listed items from '$branch'? (y/n) " -n 1 -r
echo

keep="${keep[@]}"

if [[ $REPLY =~ ^[Yy]$ ]]; then
    # do the dirty work

    # create name for a temporary directory and clone source repository to it
    tmp=$(mktemp -u 2>/dev/null || mktemp -u -t gitsplit)

    if [ $? -ne 0 ]; then
        echo "unable to create temporary directory"
        exit 1
    fi

    git clone --single-branch --branch $branch $src $tmp || { echo "unable to clone source repository"; exit 1; }

    if [ ! -d "$tmp" ]; then
        echo "destination path does not exist"
        exit 1
    fi

    # switch to tmp repository, remove remotes, tags and do the filtering work
    cd $tmp

    git remote | xargs git remote rm
    git tag -l | xargs git tag -d
    git filter-branch -f --index-filter "git rm --ignore-unmatch --cached -qr -- . && git reset -q \$GIT_COMMIT -- $keep" --prune-empty -- $branch

    # switch to source to clone tmp repository to correct destination path to get a clean history
    cd $src

    git clone $tmp $dst || { echo "unable to clone tmp repository into destination path"; exit 1; }

    # switch to destination directory and remove reference to origin
    cd $dst

    git remote | xargs git remote rm

    # remove tmp repository
    rm -rf $tmp
fi
